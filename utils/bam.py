#!/usr/bin/env python3
# -*- encoding:utf-8 -*- 
# @Author : Haoran Pan
# Date: 2022/05/31


import argparse
from rich.traceback import install
from PYHR.apps.base import ActionDispatcher
from PYHR.apps.base import check_file_exists, richlog
from PYHR.apps.base import listify, read_file


log = richlog()

def parse_bamcov(covfile):
    Chr2cov = {}
    with open(covfile) as f:
        lines = (line.strip() for line in f)
        for line in lines:
            line_list = line.split()
            if int(line_list[3]) != 0:
                if line_list[0] not in Chr2cov:
                    Chr2cov[line_list[0]] = 0
                    Chr2cov[line_list[0]] += int(line_list[2]) - int(line_list[1])
                else:
                    Chr2cov[line_list[0]] += int(line_list[2]) - int(line_list[1])
    return Chr2cov


def read_fai(file):
    df = read_file(file,['seqid','len','uk1','uk2','uk3'])
    Chr2len = df.set_index('seqid').to_dict()['len']
    return Chr2len


def Cov_count(Chr2cov,Chr2len,outputfile=None):
    Gen_len = 0 ;Cov_len = 0
    print('{}\t{}\t{}\t{}'.format('seqid','Cov_len','Gen_cov','ratio'),file=outputfile)
    for key in Chr2cov.keys():
        print('{}\t{}\t{}\t{}'.format(key,Chr2cov[key],Chr2len[key],round(Chr2cov[key]/Chr2len[key],5)*100),file=outputfile)
        Gen_len += Chr2len[key]
        Cov_len += Chr2cov[key]
    print('{}\t{}\t{}\t{}'.format('Total',Cov_len,Gen_len,round(Cov_len/Gen_len,5)*100),file=outputfile)


def depth_count(depthfile,outputfile=None): 
    reads_num = 0
    coverage_depth = 0
    contig = ''
    with open(depthfile) as f:
        for line in f:
            line_list = line.split('\t')
            if reads_num == 0:
                coverage_depth += int(line_list[2].rstrip())
                reads_num += 1
                contig = line_list[0].rstrip()
            elif reads_num != 0 and line_list[0] == contig:
                coverage_depth += int(line_list[2].rstrip())
                reads_num += 1
            else:
                depth = float(coverage_depth) / float(reads_num)
                reads_num = 0
                coverage_depth = 0
                output = contig + '\t' + str(depth)
                print(output.rstrip(),file=outputfile)
        last_depth = float(coverage_depth)/float(reads_num)
        print(contig+'\t'+str(last_depth),file=outputfile)


#outside command
def StatSeqCoverage(args):
    '''
    Count the sequencing coverage on each chromosome according to the results of `bedtools genomecov`
    >>> bedtools genomecov -bga -pc -ibam ${bam} > ${bam}.cov
    >>> %prog ${bam}.cov [-o ${bam}.cov.stat] [Options]
    '''
    install()
    p = argparse.ArgumentParser(prog=StatSeqCoverage.__name__,
                        description=StatSeqCoverage.__doc__,
                        formatter_class=argparse.RawTextHelpFormatter,
                        conflict_handler='resolve')
    pReq = p.add_argument_group('Required arguments')
    pOpt = p.add_argument_group('Optional arguments')


    pReq.add_argument('coverage',
            help='Input the result file generated by `bedtools genomecov`')
    pReq.add_argument('fai',
            help='Input the result file generated by `samtools faidx`')
    pOpt.add_argument('-o', '--output', type=argparse.FileType('w'),
            #default=sys.stdout, 
            help='output file [default: stdout]')
    pOpt.add_argument('-h', '--help', action='help',
            help='show help message and exit.')

    args = p.parse_args(args)
    check_file_exists(args.coverage)
    check_file_exists(args.fai)
    Chr2COV = parse_bamcov(args.coverage)
    Chr2Len = read_fai(args.fai)

    if args.output:
        Cov_count(Chr2COV,Chr2Len,args.output)
        log.info('Completed! the output file is `{}`'.format(args.output.name))
    else:
        Cov_count(Chr2COV,Chr2Len)


def StatSeqDepth(args):
    '''
    Counting the sequencing depth of each chromosome according to the results of `samtools depth`
    >>> samtools depth -aa bam > depth.info
    >>> %prog depth.info [-o depth.info.stat] [Options]
    '''
    install()
    p = argparse.ArgumentParser(prog=StatSeqDepth.__name__,
                        description=StatSeqDepth.__doc__,
                        formatter_class=argparse.RawTextHelpFormatter,
                        conflict_handler='resolve')
    pReq = p.add_argument_group('Required arguments')
    pOpt = p.add_argument_group('Optional arguments')


    pReq.add_argument('depth',
            help='Input the result file generated by `samtools depth`')
    pOpt.add_argument('-o', '--output', type=argparse.FileType('w'),
            #default=sys.stdout, 
            help='output file [default: stdout]')
    pOpt.add_argument('-h', '--help', action='help',
            help='show help message and exit.')

    args = p.parse_args(args)
    check_file_exists(args.depth)

    if args.output :
        depth_count(args.depth,args.output)
        log.info('Completed! the output file is `{}`'.format(args.output.name))
    else:
        depth_count(args.depth)


def main():
    actions = (
            ("StatSeqCoverage", "Count the sequencing coverage on each chromosome according to the results of `bedtools genomecov`"),
            ("StatSeqDepth", "Counting the sequencing depth of each chromosome according to the results of `samtools depth`"),
        )
    p = ActionDispatcher(actions)
    p.dispatch(globals())


if __name__ == "__main__":
    main()


